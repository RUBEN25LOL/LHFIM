import flet as ft
from typing import List, Dict
import random
from faker import Faker

class TableViewer:
    def __init__(self, page: ft.Page):
        self.page = page
        self.page.window_maximized = True
        self.fake = Faker()
        
        # Generate 80 sample records with 20 columns
        self.original_data = self.generate_sample_data(80)
        self.available_columns = [
            "id", "name", "email", "company", "job_title", "salary", "join_date", 
            "active", "rating", "phone", "address", "city", "country", "department",
            "manager", "projects", "skills", "education", "certifications", "languages"
        ]
        self.selected_columns = self.available_columns.copy()
        self.setup_ui()
    
    def generate_sample_data(self, count):
        data = []
        for i in range(1, count+1):
            data.append({
                "id": i,
                "name": self.fake.name(),
                "email": self.fake.email(),
                "company": self.fake.company(),
                "job_title": self.fake.job(),
                "salary": f"${random.randint(30000, 150000):,}",
                "join_date": self.fake.date_this_decade(),
                "active": random.choice([True, False]),
                "rating": f"{random.uniform(1, 5):.1f} â˜…",
                "phone": self.fake.phone_number(),
                "address": self.fake.street_address(),
                "city": self.fake.city(),
                "country": self.fake.country(),
                "department": random.choice(["HR", "IT", "Finance", "Marketing", "Operations"]),
                "manager": self.fake.name(),
                "projects": random.randint(1, 10),
                "skills": ", ".join(self.fake.words(random.randint(3, 8))),
                "education": random.choice(["Bachelor", "Master", "PhD"]),
                "certifications": random.randint(0, 5),
                "languages": random.choice(["English", "Spanish", "French", "German"])
            })
        return data

    def setup_ui(self):
        # Column selection checkboxes
        self.column_controls = ft.Row(
            wrap=True,
            controls=[
                ft.Checkbox(
                    label=col,
                    value=True,
                    on_change=lambda e, col=col: self.toggle_column(col, e.control.value)
                ) for col in self.available_columns
            ],
            scroll=ft.ScrollMode.AUTO
        )
        
        # DataTable configuration
        self.data_table = ft.DataTable(
            columns=[
                ft.DataColumn(
                    ft.Text(
                        col[:15] + "..." if len(col) > 15 else col,
                        weight=ft.FontWeight.BOLD,
                        tooltip=col
                    )
                ) for col in self.selected_columns
            ],
            rows=self.generate_table_rows(),
            heading_row_color=ft.colors.BLUE_GREY_100,
            heading_row_height=40,
            data_row_min_height=40,
        )
        
        # Scrollable containers
        horizontal_scroll = ft.Container(
            content=ft.Row(
                controls=[self.data_table],
                scroll=ft.ScrollMode.ALWAYS
            ),
            expand=True
        )
        
        vertical_scroll = ft.ListView(
            controls=[horizontal_scroll],
            expand=True
        )
        
        # Main layout
        self.page.add(
            ft.Column(
                controls=[
                    ft.Text("SELECT COLUMNS:", weight=ft.FontWeight.BOLD, size=16),
                    self.column_controls,
                    ft.Divider(height=1),
                    ft.Container(
                        content=vertical_scroll,
                        expand=True,
                        border=ft.border.all(1, ft.colors.GREY_300)
                ],
                expand=True,
                spacing=10
            )
        )
    
    def toggle_column(self, column: str, selected: bool):
        if selected and column not in self.selected_columns:
            self.selected_columns.append(column)
        elif not selected and column in self.selected_columns:
            self.selected_columns.remove(column)
        self.refresh_table()
    
    def generate_table_rows(self):
        return [
            ft.DataRow(
                cells=[
                    ft.DataCell(
                        ft.Text(
                            str(item[col])[:20] + "..." if len(str(item[col])) > 20 else str(item[col])
                        )
                    ) for col in self.selected_columns
                ]
            ) for item in self.original_data
        ]
    
    def refresh_table(self):
        self.data_table.columns = [
            ft.DataColumn(
                ft.Text(
                    col[:15] + "..." if len(col) > 15 else col,
                    weight=ft.FontWeight.BOLD,
                    tooltip=col
                )
            ) for col in self.selected_columns
        ]
        self.data_table.rows = self.generate_table_rows()
        self.page.update()

def main(page: ft.Page):
    page.title = "Table Viewer with Horizontal/Vertical Scroll"
    TableViewer(page)

ft.app(target=main)